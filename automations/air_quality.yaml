# Air purifier 4 (living room) - Auto mode
- alias: Set air purifier 4 favorite level based on PM2.5 value
  description: 'If air purifier is on and set to favorite mode then set level based on PM2.5'
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: state
    entity_id: fan.zhimi_airp_mb5
    state: 'on'
  - condition: state
    entity_id: fan.zhimi_airp_mb5
    state: Favorite
    attribute: preset_mode
  action:
  - service: fan.set_preset_mode
    target:
      entity_id: fan.zhimi_airp_mb5
    data:
      preset_mode: Favorite
  - service: number.set_value
    entity_id: number.zhimi_airp_mb5_favorite_level
    data_template:
      value: >
        {% if states('sensor.zhimi_airp_mb5_pm2_5') | int > 100 %}  14
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 70 %} 12
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 50 %} 10
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 40 %} 8
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 30 %} 6
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 20 %} 5
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 10 %} 4
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 5  %} 3
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 4  %} 2
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 3  %} 1
        {% else %}                                                  1
        {% endif %}

# Air purifier 2S (bedroom) - Auto mode
- alias: Set air purifier 2S favorite level based on PM2.5 value
  description: 'If air purifier is on and set to favorite mode then set level based on PM2.5'
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: state
    entity_id: fan.zhimi_airpurifier_mc1
    state: 'on'
  - condition: state
    entity_id: fan.zhimi_airpurifier_mc1
    state: Favorite
    attribute: preset_mode
  action:
  - service: fan.set_preset_mode
    target:
      entity_id: fan.zhimi_airpurifier_mc1
    data:
      preset_mode: Favorite
  - service: number.set_value
    entity_id: number.zhimi_airpurifier_mc1_favorite_level
    data_template:
      value: >
        {% if states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 100 %}  14
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 70 %} 12
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 50 %} 10
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 40 %} 8
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 30 %} 6
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 20 %} 5
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 10 %} 4
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 5  %} 3
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 4  %} 2
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 3  %} 1
        {% else %}                                                         1
        {% endif %}

# Notify about bad air quality
- alias: air_quality_notify
  trigger:
  - platform: time_pattern
    minutes: 10 
  condition:
    - condition: numeric_state
      entity_id: sensor.zhimi_airp_mb5_pm2_5
      above: 20
  #   - after: '8:00:00'
  #     before: '23:00:00'
  #     condition: time
    # - condition: template
    #   value_template: "{{ (as_timestamp(now()) - as_timestamp(states.automation.air_quality_notify.attributes.last_triggered | default(0)) | int > 40)}}"
  action:
  - service: notify.notify_smtp
    data:
      title: "[HA] Zła jakość powietrza!"
      message:
        "Bieżące odczyty:\n
          - Na zewnątrz PM2.5 = {{ states('sensor.airly_pm25') }} µg/m³ \n
          - Air Purifier 2S PM2.5 = {{ states('sensor.zhimi_airpurifier_mc1_pm2_5') }} µg/m³ \n
          - Air Purifier 4 PM2.5 = {{ states('sensor.zhimi_airp_mb5_pm2_5') }} µg/m³ \n\n
        Włącz oczyszczacz powietrza!"


# - alias: Turn on purifier if air is bad
#   trigger:
#   - above: '20'
#     entity_id: fan.air_purifier
#     for:
#       minutes: 2
#     platform: numeric_state
#     value_template: '{{ state.attributes.aqi }}'
  # condition:
  #   conditions:
  #   - after: '1:00:00'
  #     before: '23:00:00'
  #     condition: time
  # action:
  # - data:
  #     message: "AQI {{ state_attr('fan.air_purifier', 'aqi') }}, turning on the Purifier!"
  #     title: "[HA] Jakość powietrza bardzo zła!"
  #   service: notify.notifier_mail_all
  # - entity_id: fan.air_purifier
  #   service: fan.turn_on
  # - entity_id: fan.air_purifier
  #   service: fan.set_speed
  #   data:
  #     speed: favorite
  # - service: xiaomi_miio.fan_set_favorite_level       
  #   data_template:
  #     entity_id: fan.air_purifier
  #     level: >
  #       {% if state_attr('fan.air_purifier', 'aqi') | int > 80 %}
  #       14
  #       {% elif state_attr('fan.air_purifier', 'aqi') | int > 50 %}
  #       10
  #       {% elif state_attr('fan.air_purifier', 'aqi') | int > 30 %}
  #       5
  #       {% elif state_attr('fan.air_purifier', 'aqi') | int > 20 %}
  #       4
  #       {% elif state_attr('fan.air_purifier', 'aqi') | int > 15 %}
  #       3
  #       {% else %}
  #       2
  #       {% endif %}

# - alias: Turn off purifier if air good
#   trigger:
#   - below: '15'
#     entity_id: fan.air_purifier
#     for:
#       minutes: 1
#     platform: numeric_state
#     value_template: '{{ state.attributes.aqi }}'
#   action:
#   - entity_id: fan.air_purifier
#     service: fan.turn_off