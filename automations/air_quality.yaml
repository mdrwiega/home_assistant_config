# Air purifier 4 (living room) - Auto mode
- id: air_purifier_living_room_auto_mode
  alias: Set air purifier 4 favorite level based on PM2.5 value
  description: 'If the air purifier is on and set to favorite mode then set level based on PM2.5'
  trigger:
  - platform: time_pattern
    seconds: /30
  condition:
  - condition: state
    entity_id: fan.zhimi_airp_mb5
    state: 'on'
  - condition: state
    entity_id: fan.zhimi_airp_mb5
    attribute: preset_mode
    state: Favorite
  action:
  - service: fan.set_preset_mode
    target:
      entity_id: fan.zhimi_airp_mb5
    data:
      preset_mode: Favorite
  - service: number.set_value
    entity_id: number.zhimi_airp_mb5_favorite_level
    data_template:
      value: >
        {% if states('sensor.zhimi_airp_mb5_pm2_5') | int > 15 %} 11
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 14 %} 10
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 12 %} 9
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 10 %} 8
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 9  %} 7
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 8  %} 6
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 7  %} 5
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 6  %} 4
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 5  %} 3
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 4  %} 2
        {% elif states('sensor.zhimi_airp_mb5_pm2_5') | int > 3  %} 1
        {% else %}                                                  0
        {% endif %}

# Air purifier 2S (bedroom) - Auto mode
- id: air_purifier_bedroom_room_auto_mode
  alias: Set air purifier 2S favorite level based on PM2.5 value
  description: 'If the air purifier is on and set to favorite mode then set level based on PM2.5'
  trigger:
  - platform: time_pattern
    seconds: /30
  condition:
  - condition: state
    entity_id: fan.zhimi_airpurifier_mc1
    state: 'on'
  - condition: state
    entity_id: fan.zhimi_airpurifier_mc1
    attribute: preset_mode
    state: Favorite
  action:
  - service: fan.set_preset_mode
    target:
      entity_id: fan.zhimi_airpurifier_mc1
    data:
      preset_mode: Favorite
  - service: number.set_value
    entity_id: number.zhimi_airpurifier_mc1_favorite_level
    data_template:
      value: >
        {% if states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 15 %} 14
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 14 %} 11
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 12 %} 9
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 10 %} 8
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 9  %} 7
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 8  %} 6
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 7  %} 5
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 6  %} 4
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 5  %} 3
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 4  %} 2
        {% elif states('sensor.zhimi_airpurifier_mc1_pm2_5') | int > 3  %} 1
        {% else %}                                                         0
        {% endif %}

# Notify about the low air quality
- id: low_air_quality_notify
  alias: low_air_quality_notify
  trigger:
    - platform: time_pattern
      minutes: /5
  condition:
    and:
      - condition: time
        after: '8:00:00'
        before: '00:00:00'
      # notify once per 1h
      - condition: template
        value_template: "{{ (as_timestamp(now()) - as_timestamp(this.attributes.last_triggered) | default(0)) | int(0) > 3600 }}"
      - or:
        # Living room air purifier
        - condition: numeric_state
          entity_id: sensor.zhimi_airp_mb5_pm2_5
          above: 15
        # Bedroom air purifier
        - condition: numeric_state
          entity_id: sensor.zhimi_airpurifier_mc1_pm2_5
          above: 15
        # Outside
        - condition: numeric_state
          entity_id: sensor.airly_pm25
          above: 50
  action:
  - service: notify.notify_smtp
    data:
      title: "[Home] Zła jakość powietrza!"
      message:
        "Bieżące odczyty PM2.5:\n
          - Na zewnątrz (Airly) : {{ states('sensor.airly_pm25') }} µg/m³ \n
          - Air Purifier 2S     : {{ states('sensor.zhimi_airpurifier_mc1_pm2_5') }} µg/m³ \n
          - Air Purifier 4      : {{ states('sensor.zhimi_airp_mb5_pm2_5') }} µg/m³ \n\n
        Włącz oczyszczacz powietrza!"

# Turn off air purifier 4 (living room) if air quality is good enough
- id: turn_off_air_purifier_4_if_air_is_good
  alias: turn_off_air_purifier_4_if_air_is_good
  trigger:
    - platform: time_pattern
      minutes: /15
  condition:
    - condition: state
      entity_id: fan.zhimi_airp_mb5
      state: "on"
    - condition: numeric_state
      entity_id: sensor.zhimi_airp_mb5_pm2_5
      below: 5
    - condition: numeric_state
      entity_id: sensor.airly_pm25
      below: 10
  action:
    - service: fan.turn_off
      entity_id: fan.zhimi_airp_mb5

# Turn off air purifier 2S (bedroom) if air quality is good enough
- id: turn_off_air_purifier_2s_if_air_is_good
  alias: turn_off_air_purifier_2s_if_air_is_good
  trigger:
    - platform: time_pattern
      minutes: /15
  condition:
    - condition: state
      entity_id: fan.zhimi_airpurifier_mc1
      state: "on"
    - condition: numeric_state
      entity_id: sensor.zhimi_airpurifier_mc1_pm2_5
      below: 5
    - condition: numeric_state
      entity_id: sensor.airly_pm25
      below: 10
  action:
    - service: fan.turn_off
      entity_id: fan.zhimi_airpurifier_mc1

# - alias: Turn on purifier if air is bad
#   trigger:
#   - above: '20'
#     entity_id: fan.air_purifier
#     for:
#       minutes: 2
#     platform: numeric_state
#     value_template: '{{ state.attributes.aqi }}'
# condition:
#   conditions:
#   - after: '1:00:00'
#     before: '23:00:00'
#     condition: time
# action:
# - data:
#     message: "AQI {{ state_attr('fan.air_purifier', 'aqi') }}, turning on the Purifier!"
#     title: "[HA] Jakość powietrza bardzo zła!"
#   service: notify.notifier_mail_all
# - entity_id: fan.air_purifier
#   service: fan.turn_on
# - entity_id: fan.air_purifier
#   service: fan.set_speed
#   data:
#     speed: favorite